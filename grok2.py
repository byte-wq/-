
import math  # импортируем модуль для вычисления квадратного корня и других математических операций


# Задача 1
def print_1_to_n(n, j=1):
    if j > n:  # Если текущая позиция превысила n, завершаем рекурсию
        return
    print(j, end=' ')  # Печатаем текущее число и пробел
    print_1_to_n(n, j + 1)    # Рекурсивный вызов для следующего числа.


# Задача 2
def print_A_to_B(A, B):
    if A == B:  # Если A == B  печатаем число и завершаем
        print(A, end=' ')
        return
    if A < B: # Если A < B — печатаем A, затем рекурсивно печатаем от A+1 до B
        print(A, end=' ')
        print_A_to_B(A + 1, B)
    else:  # в противном случае (A > B) печатаем A затем рекурсивно печатаем от A-1 до B
        print(A, end=' ')
        print_A_to_B(A - 1, B)


# Задача 3
def sum_digits(n):
    if n <= 0:  # Если n <= 0 сумма цифр равна 0
        return 0
    return (n % 10) + sum_digits(n // 10)


# Задача 4
def remove_all_prime_factors(n, p):
    if n % p != 0: # Если p не делит n, возвращаем n как есть
        return n
    return remove_all_prime_factors(n // p, p)


def print_prime_divisors(n, i=2):

    if i * i > n: # Если i*i > n, значит либо n==1 (не печатаем), либо n простое (печатаем)
        if n > 1: # Если остаток n > 1, то он простой делитель (печатаем его)
            print(n, end=' ')
        return
    if n % i == 0:  # Если i делит n, то простой делитель i
        print(i, end=' ')  # Печатаем найденный простой делитель
        new_n = remove_all_prime_factors(n, i) # Удаляем все степени i из n (рекурсивно) и продолжаем искать делители уже для уменьшенного n
        print_prime_divisors(new_n, i + 1)  # Продолжаем поиск с i+1 (следующий возможный делитель)
    else: # Если i не делит n, то проверяем следующий (i+1)
        print_prime_divisors(n, i + 1)


  # последовательный ввод и вызовы
if __name__ == "__main__": # Ввод и запуск для Задачи 1
    n1 = int(input("Задача 1. Введите натуральное n (выведем числа 1..n): ").strip()) # Запрашиваем натуральное число n
    print_1_to_n(n1) # Печатаем числа 1..n рекурсивно
    print()

    #Ввод и запуск для Задачи 2
    A = int(input("Задача 2. Введите A: ").strip())  # Ввод двух целых чисел A и B
    B = int(input("Введите B: ").strip())
    print_A_to_B(A, B) # Печатаем числа от A до B рекурсивно
    print()  # перевод строки

    # Ввод и запуск для Задачи 3
    N = int(input("Задача 3. Введите натуральное число N (сумма цифр): ").strip()) # Ввод натурального N для суммы цифр
    result_sum_digits = sum_digits(N) #Вычисляем сумму цифр рекурсивно и печатаем результат
    print("Сумма цифр:", result_sum_digits)

    # Ввод и запуск для Задачи 4
    n4 = int(input("Задача 4. Введите натуральное n (>1) (простые делители): ").strip()) # Ввод натурального n > 1
    if n4 <= 1: # Проверка на корректность входного значения
        print("Ошибка: n должно быть больше 1.")
    else:
        print_prime_divisors(n4) # Печатаем простые делители в порядке возрастания
        print()
